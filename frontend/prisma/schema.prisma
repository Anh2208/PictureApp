// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstname     String?
  lastname      String?
  email         String    @unique
  birthdate     DateTime?
  password      String?
  username      String?   @unique
  gender        String    @default("khac")
  country       String?
  emailVerified DateTime?
  image         String?
  about         String?
  website       String?
  friends       Friends[]
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  messages      Message[]
  reactPosts    ReactPost[]
  followers Follows[] @relation("follower")
  following  Follows[] @relation("following")
  likedComments Like[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Post {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  title        String
  images       String
  description  String
  link         String
  board        String
  tagged_topic String
  comments     Comment[]
  reactPosts   ReactPost[]
}

model ReactPost {
  id           String  @id @default(cuid())
  post         Post    @relation(fields: [postId], references: [id])
  postId       String
  react        React @relation(fields: [reactId], references: [id])
  reactId      String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  number       Int @default(0)
}

model React {
  id           String    @id @default(cuid())
  imageURL     String
  reactPosts ReactPost[]
}

model Comment {
  id String @id @default(cuid())
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  content String
  createdAt  DateTime   @default(now())
  parent Comment? @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children Comment[] @relation("ChildComments")
  creatorUrl String?
  creatorImage String?
  creatorUserName String?
  likeCount      Int        @default(0)
  likes          Like[]
}

model Like {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@index([userId, commentId], name: "unique_like")
}

model Friends {
  id          String  @id @default(cuid())
  user        User    @relation(fields: [MyId], references: [id], onDelete: Cascade)
  MyId        String
  lastMessage String?
  MyFriendId  String
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiverId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
